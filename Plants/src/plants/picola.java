/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package plants;

import java.awt.GridLayout;
import plants.TDA.Lista_Doble;
import plants.TDA.Pila;
import plants.TDA.cola;
import java.util.Random;
import javax.swing.JOptionPane;

/**
 *
 * @author Javier
 */
public class picola extends javax.swing.JPanel implements Runnable {

    /**
     * Creates new form picola
     */
    int lugar=0;
    public picola() {
        initComponents();
        
    }
    boolean correr=true;
    int contadorHilo=0;

    objeto imagen=new objeto();
    Lista_Doble lista=new Lista_Doble();
    Pila p=new Pila();
    cola c=new cola();
    boolean pila=false;
    int tamano=1;
    int elementos=0;
    int control=0;
    int controlPlantas=0;
    int controlZombies=0;
    
    public void agregar()//Lista_Doble list)
    {
        lugar++;
        this.setLayout(new GridLayout(lugar,1));
        objeto nuevo=new objeto();
        this.add(nuevo);
    }
    public void setLista(Lista_Doble list,boolean Plants,int tam)
    {
        
        this.pila=Plants;
        this.lista=list;
        this.tamano=tam;

    }
    
    public void cargarPersonajes()
    {
        Plantas temporal=new Plantas();
        Lista_Doble temp=lista;
        this.setLayout(null);
        this.setLayout(new GridLayout(tamano,1));
        personaje te=new personaje();
       if(pila)
        {
            for(int i=0;i<(tamano);i++)
            {
                {
                    objeto n=new objeto();
                    te=personajeRandom();
                    if(te!=null)
                    {
                        n.setPersonaje(te,true);
                    p.Insertar(n);
                    this.add(n);
                    this.updateUI();
                    controlPlantas++;
                    }
                }
                
                
            }
            
        }
        else
        {
            for(int i=0;i<(tamano);i++)
            {
                objeto n=new objeto();
                    te=personajeRandom();
                    if(te!=null)
                    {
                        n.setPersonaje(te,false);
                        c.insertar(n);
                        this.add(n);
                        this.updateUI();
                        controlZombies++;
                    }
            }
        }
                
    }
    
 public void desapilar()
 {
     
     if (pila)
     {
         System.out.println("es una pila");
         int t=this.p.cantidadElementos();
         Pila temp1=new Pila();
         for(int i=1;i<t;i++)
         {
             temp1.Insertar(p.Extraer());
         }
         System.out.println("La pila tiene " +t+" elementos y el contro de"
                 + "plantas es: "+controlPlantas);
         if(controlPlantas>0)
         {
             this.removeAll();
             for(int i=1;i<t;i++)
            {
                 objeto n=new objeto();
                 n=(objeto)temp1.Extraer();
                 p.Insertar(n);
                 this.add(n);
                this.updateUI();
                this.repaint();
                 controlPlantas--;
                 
            }
             
             //Pila a=new Pila();
         }
     }
     else
     {
         
     }
             
 }
    public personaje personajeRandom()
    {
        personaje devolver=null;
        Plantas te;
        int tamanoLista=lista.tamano();
        Random  rnd = new Random();
        int b=(int)(rnd.nextDouble() * (tamanoLista)+1);
        if(tamano!=0)
        {
            while(b==0)
            {
                b=(int)(rnd.nextDouble() * (tamanoLista+1));
            }
            te=(Plantas)lista.EliminarPosicion(b);
            if(te!=null)
            {
            devolver=te.getNuevo();
            }
            
            
        }
        return devolver;
    }
    
    public Pila getPila()
    {
        return this.p;
    }
    public cola getCola()
    {
        return this.c;
    }
    
    public int getTamano()
    {
        return this.tamano;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 99, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        //throw new UnsupportedOperationException("Not supported yet.");
      personaje te=new personaje();
      
        this.setLayout(null);
        this.setLayout(new GridLayout(tamano,1));
        while(correr)
        {
            contadorHilo++;
            try{
            Thread.sleep(5000);
        }catch (InterruptedException e) { }
            int temporal=tamano-1;
        if(this.getComponentCount()<tamano)
        {
            if(pila)
                {
                    if(!this.lista.esVacia())
                    {
                        objeto n=new objeto();
                        te=personajeRandom();
                        if(te!=null)
                        {
                          n.setPersonaje(te,true);
                          p.Insertar(n);
                          this.add(n);//,-1);
                          this.updateUI();
                          controlPlantas++;
                      }   
                    }
                }





               else
               {
                   if(!this.lista.esVacia())
                    {
                        objeto n=new objeto();
                        te=personajeRandom();
                        if(te!=null)
                        {
                            n.setPersonaje(te,false);
                            c.insertar(n);
                            this.add(n);
                            this.updateUI();
                            controlZombies++;
                        }
                    }
               }
            
        }
            
     }//To change body of generated methods, choose Tools | Templates.
    }
    Thread hilo;

  public void start(){
     if(hilo==null){
        hilo=new Thread(this);
        hilo.start();
     }
  }
}
